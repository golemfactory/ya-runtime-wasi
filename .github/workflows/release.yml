name: Release
on:
  push:
    tags:
      - v*
      - pre-rel-*

jobs:
  create-rel:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
              Changes in this Release
              - First Change
              - Second Change
          draft: false
          prerelease: true
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}-${{ matrix.version }}
    needs: create-rel
    strategy:
      matrix:
        os:
          - ubuntu
          - windows
          - macos
        include:
          - os: ubuntu
            version: 20.04
          - os: windows
            version: latest
          - os: macos
            version: latest
    steps:
      - uses: actions/checkout@v1
      - name: Musl
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt-get install musl musl-tools

          musl-gcc -v

      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
              let tag = context.payload.ref.replace(/.*\//, '');
              let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              console.log(release.data.upload_url);
              return release.data.upload_url

      - uses: actions-rs/toolchain@v1
        if: matrix.os != 'ubuntu'
        with:
          toolchain: stable
      - uses: actions-rs/toolchain@v1
        if: matrix.os == 'ubuntu'
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
      - name: Cargo Deb
        if: matrix.os == 'ubuntu'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb
      - name: Build Deb
        if: matrix.os == 'ubuntu'
        uses: actions-rs/cargo@v1
        with:
          command: deb
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Pack
        id: pack
        shell: bash
        env:
          OS_NAME: ${{ matrix.os }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          target=
          if [ "$OS_NAME" = "ubuntu" ]; then
            OS_NAME=linux
            echo "::set-output name=deb::`basename target/debian/*.deb`"
          elif [ "$OS_NAME" == "macos" ]; then
            OS_NAME=osx
          fi
          TARGET_DIR=releases/ya-runtime-wasi-${OS_NAME}-${TAG_NAME}

          mkdir -p "$TARGET_DIR"
          cp conf/ya-runtime-wasi.json "$TARGET_DIR/"
          if [ "$OS_NAME" = "windows" ]; then
              cp target/release/ya-runtime-wasi.exe "$TARGET_DIR/"
              strip "$TARGET_DIR/ya-runtime-wasi.exe"
          else
              cp target/${target}release/ya-runtime-wasi "$TARGET_DIR/"
              strip "$TARGET_DIR/ya-runtime-wasi"
          fi
          ls -al "$TARGET_DIR"
          if [ "$OS_NAME" = "windows" ]; then
              echo "::set-output name=artifact::ya-runtime-wasi-${OS_NAME}-${TAG_NAME}.zip"
              echo "::set-output name=media::application/zip"
              (cd "$TARGET_DIR" && 7z a "../ya-runtime-wasi-${OS_NAME}-${TAG_NAME}.zip" * )
          else
              echo "::set-output name=artifact::ya-runtime-wasi-${OS_NAME}-${TAG_NAME}.tar.gz"
              echo "::set-output name=media::application/tar+gzip"
              (cd releases && tar czvf "ya-runtime-wasi-${OS_NAME}-${TAG_NAME}.tar.gz" "ya-runtime-wasi-${OS_NAME}-${TAG_NAME}")
          fi
      - name: Upload Deb
        if: matrix.os == 'ubuntu'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ./target/debian/${{ steps.pack.outputs.deb }}
          asset_name: ${{ steps.pack.outputs.deb }}
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: ./releases/${{ steps.pack.outputs.artifact }}
          asset_name: ${{ steps.pack.outputs.artifact }}
          asset_content_type: ${{ steps.pack.outputs.media }}

